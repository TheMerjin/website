---
import HeaderWhite from '../../components/HeaderWhite.astro';
const { taskid } = Astro.params;
console.log(taskid);
let data = null;
let task = null;
let tasks = null;
const cookie = Astro.request.headers.get('cookie') || '';
try {
  const res = await fetch(`${import.meta.env.PUBLIC_API_URL}api/tasks`, {
    headers: { cookie }
  });
  
  if (res.ok) {
    data = await res.json();
    tasks = data.tasks
  }
} catch (e) {
  console.log(e);
  task = null;
}
for (const t of tasks){
  if (t.id === taskid){
    task = t;

  }
}


---
<HeaderWhite />
<main class="lw-main">
  <div class="lw-header-row">
    <h1 class="lw-title">Task Details</h1>
    <a href="/master-tracker" class="lw-btn lw-btn-back" aria-label="Go back to Master Tracker">Go Back to Master Tracker</a>
  </div>
  {task ? (
    <>
      <section class="lw-section">
        <table class="lw-table" style="max-width: 600px; margin: 0 auto;">
          <tbody>
            <tr><th>Class</th><td>{task.class}</td></tr>
            <tr><th>Item</th><td>{task.item}</td></tr>
            <tr><th>Type</th><td>{task.type}</td></tr>
            <tr><th>Due Date</th><td>{task.due_date}</td></tr>
            <tr><th>Est. Time</th><td>{task.est_time}</td></tr>
            <tr><th>Status</th><td>{task.status}</td></tr>
            <tr><th>Link</th><td>{task.link ? <a href={task.link} class="lw-link">{task.link}</a> : <span style="color:#888;">None</span>}</td></tr>
            <tr><th>Notes</th><td>{task.notes || <span style="color:#888;">None</span>}</td></tr>
            <tr><th>Time Left</th><td class="lw-taskid-cell">{task.time_left ?? <span style="color:#888;">Unknown</span>}</td></tr>
            <tr><th>ID</th><td class="lw-taskid-cell">{task.id}</td></tr>
          </tbody>
        </table>
      </section>
      <section class="lw-section" style="max-width:600px;margin:2rem auto 0 auto;">
        <form id="edit-task-form" method="post" style="display:flex;flex-direction:column;gap:1rem;">
          <div style="display:flex;gap:1.5rem;align-items:center;">
            <label for="status" style="font-family:'Inter',Helvetica,Arial,sans-serif;font-weight:600;font-size:1rem;color:#232323;">Status</label>
            <select name="status" id="status" style="border:1px solid #ccc;border-radius:0;padding:0.3rem 0.5rem;font-family:inherit;font-size:1rem;background:#fff;color:#1a1a1a;outline:none;">
              <option value="To Do" selected={task.status === 'To Do'}>To Do</option>
              <option value="In Progress" selected={task.status === 'In Progress'}>In Progress</option>
              <option value="Done" selected={task.status === 'Done'}>Done</option>
            </select>
          </div>
          <div style="display:flex;gap:1.5rem;align-items:center;">
            <label for="time_left" style="font-family:'Inter',Helvetica,Arial,sans-serif;font-weight:600;font-size:1rem;color:#232323;">Time Left</label>
            <input type="number" step="any" name="time_left" id="time_left" value={task.time_left ?? ''} style="border:1px solid #ccc;border-radius:0;padding:0.3rem 0.5rem;font-family:inherit;font-size:1rem;background:#fff;color:#1a1a1a;outline:none;width:120px;" />
          </div>
          <button type="submit" class="lw-btn lw-btn-back" style="width:max-content;">Update Task</button>
        </form>
        <script type="module">
          const form = document.getElementById('edit-task-form');
          form.onsubmit = async (e) => {
            e.preventDefault();
            const status = form.status.value;
            const time_left = form.time_left.value;
            let ok = true;
            let msg = '';
            const urlParts = window.location.pathname.split('/');
            console.log(urlParts);
            const taskid = urlParts[urlParts.length - 1];
            console.log(taskid);

            // Update status
            const res1 = await fetch('/api/tasks/status_change', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ id: taskid , status : status, _update: true })
            });
            if (!res1.ok) { ok = false; msg += 'Failed to update status. '; console.log(res1); }
            // Update time_left
            const res2 = await fetch('/api/tasks/time_left_change', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ id: taskid , time_left: time_left })
            });
            if (!res2.ok) { ok = false; msg += 'Failed to update time left.'; }
            if (ok) {
              window.location.reload();
            } else {
              alert(msg);
            }
          };
        </script>
      </section>
    </>
  ) : (
    <section class="lw-section">
      <div style="color:#888; font-style:italic; text-align:center; padding:2rem;">Task not found.</div>
    </section>
  )}
</main>
<style>
.lw-header-row {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  gap: 1rem;
  margin-bottom: 1.2rem;
}
.lw-title {
  margin: 0;
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-size: 1.2rem;
  font-weight: 700;
  color: #1a1a1a;
}
.lw-btn-back {
  border: 1px solid #aaa;
  background: #eee;
  color: #111;
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-size: 1rem;
  padding: 0.18rem 0.8rem;
  border-radius: 0;
  text-decoration: none;
  font-weight: 500;
  transition: background 0.15s, border-color 0.15s;
  box-shadow: none;
  outline: none;
  display: inline-block;
}
.lw-btn-back:hover {
  background: #e2e2e2;
  border-color: #888;
}
.lw-btn-back:focus {
  outline: 2px solid #2b6cb0;
}
.lw-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.97rem;
  background: none;
  border: none;
}
.lw-table th, .lw-table td {
  border: 1px solid #ddd;
  padding: 0.18rem 0.3rem;
  text-align: left;
  font-family: Georgia, serif;
  font-weight: 400;
}
.lw-table th {
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-weight: 600;
  background: #f5f5f5;
  width: 140px;
  color: #232323;
}
.lw-table td {
  color: #1a1a1a;
}
.lw-taskid-cell {
  font-family: 'Fira Mono', 'Consolas', 'Menlo', 'Monaco', monospace;
  font-size: 0.93rem;
  color: #666;
  background: #fafafa;
  word-break: break-all;
  letter-spacing: 0.01em;
  padding: 0.18rem 0.3rem;
}
</style> 