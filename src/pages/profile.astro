---
import WebsiteLayout from '../layouts/WebsiteLayout.astro';
import ProfilePostCard from '../components/ProfilePostCard.astro';
const res = await fetch(`${import.meta.env.PUBLIC_API_URL}api/auth/get_posts`);
const { posts } = await res.json();

// Fetch current user id
const userRes = await fetch(`${import.meta.env.PUBLIC_API_URL}api/auth/user-data`, { headers: { cookie: Astro.request.headers.get('cookie') || '' } });
const { user } = await userRes.json();

// Filter posts by current user
const profile_posts = posts.filter((post: any) => post.author_id === user.id).slice(0, 3);

---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Profile</title>
</head>

<body style="background: #f8f2e4; color: #1a1a1a; margin: 0; padding: 0; font-family: Georgia, serif;">
<WebsiteLayout>
  <main class="profile-main">
    <section class="profile-header-lw">
      <div class="profile-user-info-lw">
        <h1 id="username" class="profile-username-lw">Loading...</h1>
        <div class="user-stats-lw" id="user-stats"></div>
        <div class="elo-display-lw" id="elo-display">
          <span class="elo-label-lw">Chess Rating</span>
          <span class="elo-value-lw" id="elo-value">Loading...</span>
        </div>
      </div>
      <nav class="profile-nav-lw">
        <a href="#posts" class="profile-link-lw">My Posts</a>
        <span class="profile-nav-sep">&bull;</span>
        <a href="#" class="profile-link-lw">Favorites</a>
        <span class="profile-nav-sep">&bull;</span>
        <a href="#" class="profile-link-lw">Settings</a>
        <button class="logout-btn-lw" type="button">Logout</button>
      </nav>
    </section>
    <section class="profile-bio-lw">
      <h2 class="profile-section-title-lw">Bio</h2>
      <div id="Bio" class="profile-bio-text-lw">I am a traveler of many lands</div>
    </section>
    <section class="profile-posts-lw" id="posts">
      <h2 class="profile-section-title-lw">Posts</h2>
      {posts.length === 0 ? (
        <p class="profile-empty-lw">No posts yet!</p>
      ) : (
        profile_posts.map((post: any) => <ProfilePostCard post={post} key={post.id} />)
      )}
    </section>
  </main>
  <style>
    .profile-main {
      max-width: 800px;
      margin: 2rem auto;
      padding: 0 1rem 2rem 1rem;
      background: #f8f2e4;
      border: none;
      border-radius: 0;
      box-shadow: none;
    }
    .profile-header-lw {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      border-bottom: 1px solid #eee;
      padding-bottom: 1rem;
      margin-bottom: 1.2rem;
      background: none;
    }
    .profile-user-info-lw {
      margin-bottom: 0.5rem;
    }
    .profile-username-lw {
      font-family: 'Inter', Helvetica, Arial, sans-serif;
      font-size: 1.2rem;
      font-weight: 700;
      margin: 0 0 0.3rem 0;
      color: #1a1a1a;
    }
    .user-stats-lw {
      font-family: 'Inter', Helvetica, Arial, sans-serif;
      font-size: 1rem;
      color: #666;
      margin-bottom: 0.3rem;
    }
    .elo-display-lw {
      font-family: 'Inter', Helvetica, Arial, sans-serif;
      font-size: 1rem;
      color: #444;
      margin-bottom: 0.2rem;
    }
    .elo-label-lw {
      font-size: 0.95rem;
      color: #888;
      margin-right: 0.5rem;
    }
    .elo-value-lw {
      font-size: 1.1rem;
      color: #232323;
      font-family: 'Inter', Helvetica, Arial, sans-serif;
    }
    .profile-nav-lw {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 0.5rem;
      margin-top: 0.2rem;
      font-family: 'Inter', Helvetica, Arial, sans-serif;
      font-size: 1rem;
    }
    .profile-link-lw {
      color: #2b6cb0;
      text-decoration: underline;
      border: 1px solid #bdbdbd;
      border-radius: 0;
      background: none;
      padding: 0.1rem 0.5rem;
      font-size: 1rem;
      transition: border-color 0.15s, background 0.15s;
    }
    .profile-link-lw:hover, .profile-link-lw:focus {
      border-color: #232323;
      background: #f5f5f5;
      color: #888;
      outline: 2px solid #2b6cb0;
    }
    .profile-nav-sep {
      color: #bbb;
      margin: 0 0.2rem;
    }
    .logout-btn-lw {
      border: 1px solid #aaa;
      background: #eee;
      color: #111;
      font-family: 'Inter', Helvetica, Arial, sans-serif;
      font-size: 1rem;
      padding: 0.18rem 0.8rem;
      border-radius: 0;
      text-decoration: none;
      font-weight: 500;
      transition: background 0.15s, border-color 0.15s;
      box-shadow: none;
      outline: none;
      margin-left: 1.2rem;
      cursor: pointer;
      min-width: 0;
    }
    .logout-btn-lw:hover, .logout-btn-lw:focus {
      background: #e2e2e2;
      border-color: #888;
      outline: 2px solid #2b6cb0;
    }
    .profile-bio-lw {
      margin-bottom: 1.2rem;
    }
    .profile-section-title-lw {
      font-family: 'Inter', Helvetica, Arial, sans-serif;
      font-size: 1.02rem;
      font-weight: 600;
      color: #232323;
      margin: 0 0 0.3rem 0;
      border: none;
      text-align: left;
    }
    .profile-bio-text-lw {
      font-family: Georgia, serif;
      font-size: 1rem;
      color: #444;
      margin: 0 0 0.2rem 0;
    }
    .profile-posts-lw {
      margin-bottom: 0.7rem;
      padding: 0;
      border: none;
    }
    .profile-empty-lw {
      color: #888;
      font-style: italic;
      text-align: center;
      padding: 2rem;
    }
    @media (max-width: 900px) {
      .profile-main {
        max-width: 100vw;
        padding: 0.5rem 0.2rem 1rem 0.2rem;
      }
      .profile-header-lw {
        padding-bottom: 0.7rem;
      }
      .profile-nav-lw {
        font-size: 0.95rem;
      }
      .logout-btn-lw {
        padding: 0.12rem 0.5rem;
        font-size: 0.95rem;
        margin-left: 0.5rem;
      }
    }
  </style>
  <script>
  function myFunction(){
        window.location.assign(`${import.meta.env.PUBLIC_API_URL}post-editor` );
        
    }
  import { supabase } from "../lib/client-supabase";

    const logoutButton = document.querySelector('.logout-btn-lw');
  if (logoutButton) {
    logoutButton.addEventListener('click', async () => {
      console.log("Running");
      await supabase.auth.signOut();
      // your sign out logic
    


      // Optionally call backend API to sign out server-side (e.g., clear cookies)
      try {
        const res = await fetch('/api/auth/signout', {
    method: 'POST',
    credentials: 'include',    // ‚Üê send cookies so server can clear them
});
        if (!res.ok) {
          console.error('Backend sign out failed');
        } else {
          console.log('Backend sign out successful');
        }
      } catch (err) {
        console.error('Error calling backend sign out:', err);
      }

      // Redirect user after sign out
      window.location.assign(`${import.meta.env.PUBLIC_API_URL}`);
      }
    )}
    
      async function load_user_name() {
        try {
          const response = await fetch('/api/auth/user-data', {
            method: "GET",
            credentials: "include"
          });
    
          if (!response.ok) {
            throw new Error("Failed to fetch user");
          }
    
          const data = await response.json();
          const user = data.user;
    
          
    
          // Display username
          const usernameElem = document.getElementById("username");
          if (usernameElem) {
            usernameElem.textContent = user.user_metadata.username;
          }
          const userStatsElem = document.getElementById("user-stats");
          if (userStatsElem) {
            userStatsElem.textContent = "Joined: " + user.created_at.slice(0,10);
          }
    
          // Display stats (replace with real values later if available)
          
    
        } catch (error) {
          console.error(error);
          alert("Error loading user data.");
        }
      }

      async function load_bio() {
        try {
          const response = await fetch('/api/auth/get_bio', {
            method: "GET",
            credentials: "include"
          });
          
    
          if (!response.ok) {
            const err = await response.json();
            throw new Error(err.error || "Failed to fetch user");
          }
          const data = await response.json();
          const user = data.user;
          console.log(response)
          const bioElem = document.getElementById("Bio");
          if (bioElem) {
            bioElem.textContent = data.profile.bio;
          }
          
    
          // Display stats (replace with real values later if available)
          
    
        } catch (error) {
          console.error(error);
          alert("Error loading user data.");
        }
      }
      const newPostButton = document.getElementById('new-post-button-and-text');
      if (newPostButton) {
        newPostButton.addEventListener('click', myFunction); // Now the linter sees this usage
      } else {
        console.error("Button with ID 'new-post' not found for event listener.");
      }

    
      async function load_elo_rating() {
        try {
          const response = await fetch('/api/auth/user-data', {
            method: "GET",
            credentials: "include"
          });
    
          if (!response.ok) {
            throw new Error("Failed to fetch user");
          }
    
          const data = await response.json();
          const user = data.user;
          
          // Get the user's profile data including skill rating
          const profileResponse = await fetch('/api/auth/get_bio', {
            method: "GET",
            credentials: "include"
          });
          
          if (!profileResponse.ok) {
            throw new Error("Failed to fetch profile data");
          }
          
          const profileData = await profileResponse.json();
          const skillMean = profileData.profile.skill_mean || 1500;
          
          // Calculate display rating (TrueSkill to ELO approximation)
          const displayRating = Math.round(skillMean);
          
          // Determine rating category and color
          let ratingClass = 'beginner';
          if (displayRating >= 2000) ratingClass = 'excellent';
          else if (displayRating >= 1600) ratingClass = 'good';
          else if (displayRating >= 1200) ratingClass = 'average';
          
          // Update the ELO display
          const eloValueElem = document.getElementById("elo-value");
          if (eloValueElem) {
            eloValueElem.textContent = displayRating.toString();
            eloValueElem.className = `elo-value ${ratingClass}`;
          }
    
        } catch (error) {
          console.error('Error loading ELO rating:', error);
          const eloValueElem = document.getElementById("elo-value");
          if (eloValueElem) {
            eloValueElem.textContent = "N/A";
            eloValueElem.className = "elo-value beginner";
          }
        }
      }

      load_user_name();
      load_bio();
      load_elo_rating();

    </script>
</WebsiteLayout>
</body>
</html>