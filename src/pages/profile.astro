---
import WebsiteLayout from '../layouts/WebsiteLayout.astro';
import ProfilePostCard from '../components/ProfilePostCard.astro';
const res = await fetch(`${import.meta.env.PUBLIC_API_URL}api/auth/get_posts`);
const { posts } = await res.json();
const profile_posts = posts.slice(0,3)

---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Profile</title>
</head>

<body style = " background-color: #fff4ec; color: #333; margin: 0; padding: 0;">
<WebsiteLayout>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <div class="profile-header">
      <div class="user-info">
      <h1 id="username">Loading...</h1>
      <div class="user-stats" id="user-stats">
          <!-- Stats will be injected -->
      </div>
      <div class="elo-display" id="elo-display">
        <div class="elo-badge">
          <span class="elo-label">Chess Rating</span>
          <span class="elo-value" id="elo-value">Loading...</span>
        </div>
      </div>
      <div class="header-nav">
          <a href="#posts">My Posts</a><span>&bull;</span>
          <a href="#">Favorites</a><span>&bull;</span>
          <a href="#">Settings</a>
          <span class = "spacer"></span>
          <div id = "new-post-button-and-text">
          <button id = "new-post" >
            <img src="/assets_task_01jw742a8nfz48tp2bhjht7wav_1748290863_img_3.jpg" style="width:35px;height:35px;" alt="New post">
          </button>
          <h6> New post</h6>
          </div>
          <button class="logout-button">Logout</button>
      </div>
      </div>
    <div>
      <h2> Bio</h2>
      <h5 id="Bio"> I am a traveler of many lands</h5>
    </div>
    <section class = "post-section" id = "posts">
      <h2> Posts</h2>
      <section id = "posts">
        {posts.length === 0 ? (
          <p>No posts yet!</p>
        ) : (
          profile_posts.map((post: any) => <ProfilePostCard post={post} key={post.id} />)
        )}
      </section>
    </section>
  </div>
  <style>
    .post-section{
      margin: 0rem;
      padding: 1rem 0rem;
    }
    #new-post-button-and-text{
      display: contents;
      margin: 0;
      padding: 0;
      border: none;
      background: none;
      font-size: 1rem;
      color: inherit;
      line-height: inherit;
    }
    .spacer {
      margin-left: 5vw;
    }
    #new-post {
      background-color: transparent; 
      border: none;
      padding: 0;
      cursor: pointer;
      border-bottom: 0px solid #fff4ec;
      max-width: 100vw;
      margin-left: 8vw;
      margin-right: auto;
      outline: none;
      border: none;
      background: none;
    }
    #new-post:hover {
      background-color: transparent;
      outline: none;
      border: none;
      background: none;
    }
    .logout-button {
      display: flex;
      align-items: center;
      padding: 0.8rem 1.6rem;
      border-bottom: 0px solid #fff4ec;
      max-width: 100vw;
      max-height: 100vw;
      margin-left: 2vw;
      margin-right: auto;
      gap : 1rem;
    }
    .profile-header {
      padding: 1rem 5vw;
      border-bottom: 1px solid #fff4ec;
      max-width: 100vw;
      margin-left: auto;
      margin-right: auto;
    }
    h1 {
      margin: 3 3 0.5rem 0;
      font-size: 2rem;
    }
    .user-stats {
      display: flex;
      align-items: center;
      gap: 1.5rem;
      margin-bottom: 0.75rem;
      font-size: 1rem;
      color: #555;
    }
    .user-stats span {
      display: inline-flex;
      align-items: center;
    }
    .user-stats svg {
      width: 1.1rem;
      height: 1.1rem;
      margin-right: 0.4rem;
      fill: currentColor;
    }
    
    .elo-display {
      margin: 1rem 0;
    }
    
    .elo-badge {
      display: inline-flex;
      align-items: center;
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      border: 1px solid #dee2e6;
      border-radius: 12px;
      padding: 0.75rem 1.25rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
    }
    
    .elo-badge::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
      pointer-events: none;
    }
    
    .elo-badge:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
      border-color: #adb5bd;
    }
    
    .elo-label {
      font-size: 0.875rem;
      font-weight: 500;
      color: #6c757d;
      margin-right: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .elo-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #495057;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      position: relative;
      z-index: 1;
    }
    
    .elo-value.loading {
      color: #adb5bd;
      font-style: italic;
    }
    
    .elo-value.excellent {
      color: #28a745;
    }
    
    .elo-value.good {
      color: #17a2b8;
    }
    
    .elo-value.average {
      color: #ffc107;
    }
    
    .elo-value.beginner {
      color: #6c757d;
    }
    .header-nav {
      display: flex;
      align-items: center;
      flex-wrap: wrap;
      font-size: 1.2rem;
      margin-left: -0.5rem;
      gap: 0.5rem;
    }
    .header-nav a {
      text-decoration: none;
      margin: 0 0.5rem;
      color: #456650;
      font-weight: 500;
    }
    .header-nav span {
      color: #999;
    }
    @media (max-width: 800px) {
      .profile-header {
        padding: 1rem 2vw;
        max-width: 100vw;
        margin-left: auto;
        margin-right: auto;
      }
      .header-nav {
        font-size: 1rem;
        flex-wrap: wrap;
        gap: 0.3rem;
      }
      .logout-button {
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
      }
      #new-post {
        margin-left: 2vw;
      }
      .spacer {
        margin-left: 2vw;
      }
    }
    @media (max-width: 500px) {
      .profile-header {
        padding: 0.5rem 1vw;
      }
      .header-nav {
        font-size: 0.9rem;
        gap: 0.2rem;
      }
      .logout-button {
        padding: 0.3rem 0.5rem;
        font-size: 0.9rem;
      }
      #new-post {
        margin-left: 1vw;
      }
      .spacer {
        margin-left: 1vw;
      }
      h1 {
        font-size: 1.2rem;
      }
      .user-stats {
        font-size: 0.85rem;
      }
      .elo-badge {
        padding: 0.5rem 1rem;
      }
      .elo-label {
        font-size: 0.75rem;
      }
      .elo-value {
        font-size: 1.25rem;
      }
    }
  </style>
  <script>
  function myFunction(){
        window.location.assign(`${import.meta.env.PUBLIC_API_URL}post-editor` );
        
    }
  import { supabase } from "../lib/client-supabase";

    const logoutButton = document.querySelector('.logout-button');
  if (logoutButton) {
    logoutButton.addEventListener('click', async () => {
      console.log("Running");
      await supabase.auth.signOut();
      // your sign out logic
    


      // Optionally call backend API to sign out server-side (e.g., clear cookies)
      try {
        const res = await fetch('/api/auth/signout', {
    method: 'POST',
    credentials: 'include',    // ‚Üê send cookies so server can clear them
});
        if (!res.ok) {
          console.error('Backend sign out failed');
        } else {
          console.log('Backend sign out successful');
        }
      } catch (err) {
        console.error('Error calling backend sign out:', err);
      }

      // Redirect user after sign out
      window.location.assign(`${import.meta.env.PUBLIC_API_URL}`);
      }
    )}
    
      async function load_user_name() {
        try {
          const response = await fetch('/api/auth/user-data', {
            method: "GET",
            credentials: "include"
          });
    
          if (!response.ok) {
            throw new Error("Failed to fetch user");
          }
    
          const data = await response.json();
          const user = data.user;
    
          
    
          // Display username
          const usernameElem = document.getElementById("username");
          if (usernameElem) {
            usernameElem.textContent = user.user_metadata.username;
          }
          const userStatsElem = document.getElementById("user-stats");
          if (userStatsElem) {
            userStatsElem.textContent = "Joined: " + user.created_at.slice(0,10);
          }
    
          // Display stats (replace with real values later if available)
          
    
        } catch (error) {
          console.error(error);
          alert("Error loading user data.");
        }
      }

      async function load_bio() {
        try {
          const response = await fetch('/api/auth/get_bio', {
            method: "GET",
            credentials: "include"
          });
          
    
          if (!response.ok) {
            const err = await response.json();
            throw new Error(err.error || "Failed to fetch user");
          }
          const data = await response.json();
          const user = data.user;
          console.log(response)
          const bioElem = document.getElementById("Bio");
          if (bioElem) {
            bioElem.textContent = data.profile.bio;
          }
          
    
          // Display stats (replace with real values later if available)
          
    
        } catch (error) {
          console.error(error);
          alert("Error loading user data.");
        }
      }
      const newPostButton = document.getElementById('new-post-button-and-text');
      if (newPostButton) {
        newPostButton.addEventListener('click', myFunction); // Now the linter sees this usage
      } else {
        console.error("Button with ID 'new-post' not found for event listener.");
      }

    
      async function load_elo_rating() {
        try {
          const response = await fetch('/api/auth/user-data', {
            method: "GET",
            credentials: "include"
          });
    
          if (!response.ok) {
            throw new Error("Failed to fetch user");
          }
    
          const data = await response.json();
          const user = data.user;
          
          // Get the user's profile data including skill rating
          const profileResponse = await fetch('/api/auth/get_bio', {
            method: "GET",
            credentials: "include"
          });
          
          if (!profileResponse.ok) {
            throw new Error("Failed to fetch profile data");
          }
          
          const profileData = await profileResponse.json();
          const skillMean = profileData.profile.skill_mean || 1500;
          
          // Calculate display rating (TrueSkill to ELO approximation)
          const displayRating = Math.round(skillMean);
          
          // Determine rating category and color
          let ratingClass = 'beginner';
          if (displayRating >= 2000) ratingClass = 'excellent';
          else if (displayRating >= 1600) ratingClass = 'good';
          else if (displayRating >= 1200) ratingClass = 'average';
          
          // Update the ELO display
          const eloValueElem = document.getElementById("elo-value");
          if (eloValueElem) {
            eloValueElem.textContent = displayRating.toString();
            eloValueElem.className = `elo-value ${ratingClass}`;
          }
    
        } catch (error) {
          console.error('Error loading ELO rating:', error);
          const eloValueElem = document.getElementById("elo-value");
          if (eloValueElem) {
            eloValueElem.textContent = "N/A";
            eloValueElem.className = "elo-value beginner";
          }
        }
      }

      load_user_name();
      load_bio();
      load_elo_rating();

    </script>
</WebsiteLayout>
</body>
</html>