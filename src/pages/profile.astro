---
import WebsiteLayout from '../layouts/WebsiteLayout.astro';
import ProfilePostCard from '../components/ProfilePostCard.astro';
const res = await fetch(`${import.meta.env.PUBLIC_API_URL}api/auth/get_posts`);
const { posts } = await res.json();
const profile_posts = posts.slice(0,3)

---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Profile</title>
</head>

<body style = " background-color: #fff4ec; color: #333; margin: 0; padding: 0;">
<WebsiteLayout>
  <div class="profile-header">
      <div class="user-info">
      <h1 id="username">Loading...</h1>
      <div class="user-stats" id="user-stats">
          <!-- Stats will be injected -->
      </div>
      <div class="header-nav">
          <a href="#posts">My Posts</a><span>&bull;</span>
          <a href="#">Favorites</a><span>&bull;</span>
          <a href="#">Settings</a>
          <span class = "spacer"></span>
          <div id = "new-post-button-and-text">
          <button id = "new-post" >
            <img src="/assets_task_01jw742a8nfz48tp2bhjht7wav_1748290863_img_3.jpg" style="width:35px;height:35px;" alt="New post">
          </button>
          <h6> New post</h6>
          </div>
          <button class="logout-button">Logout</button>
      </div>
      </div>
    <div>
      <h2> Bio</h2>
      <h5 id="Bio"> I am a traveler of many lands</h5>
    </div>
    <section class = "post-section" id = "posts">
      <h2> Posts</h2>
      <section id = "posts">
        {posts.length === 0 ? (
          <p>No posts yet!</p>
        ) : (
          profile_posts.map((post: any) => <ProfilePostCard post={post} key={post.id} />)
        )}
      </section>
    </section>
  </div>
  <style>
    .post-section{
      margin: 0rem;
      padding: 1rem 0rem;
    }
    #new-post-button-and-text{
      display: contents;
      margin: 0;
      padding: 0;
      border: none; /* or border: 0; */
      background: none; /* or background-color: transparent; */
      font-size: 1rem; /* Ensures it doesn't change font size */
      color: inherit;     /* Ensures it doesn't change text color */
      line-height: inherit;
    }
      .spacer {
        margin-left: 100px
      }
      #new-post {
        background-color: transparent; 
        border: none;
        padding: 0; /* If you only want the image to be clickable */
        cursor: pointer;
        padding: 0rem 0rem;
        border-bottom: 0px solid #fff4ec;
        max-width: 900px;
        margin-left: 8rem;
        margin-right: auto;
        outline: none;        /* removes the focus outline */
        border: none;         /* removes the button border */
        background: none;
      }
      #new-post:hover {
        background-color: transparent
        outline: none;        /* removes the focus outline */
        border: none;         /* removes the button border */
        background: none;
      }
    
      .logout-button {
      display: flex;
      align-items: center;
      padding: 0.8rem 1.6rem;
      border-bottom: 0px solid #fff4ec;
      max-width: 900px;
      max-height: 900px;
      margin-left: 2rem;
      margin-right: auto;
      gap : 1rem;
      
      }
      .profile-header {
      padding: 1rem 5rem;
      border-bottom: 1px solid #fff4ec;
      max-width: 900px;
      margin-left: 12rem;
      margin-right: auto;
      }

      h1 {
      margin: 3 3 0.5rem 0;
      font-size: 2rem;
      }

      .user-stats {
      display: flex;
      align-items: center;
      gap: 1.5rem;
      margin-bottom: 0.75rem;
      font-size: 1rem;
      color: #555;
      }

      .user-stats span {
      display: inline-flex;
      align-items: center;
      }

      .user-stats svg {
      width: 1.1rem;
      height: 1.1rem;
      margin-right: 0.4rem;
      fill: currentColor;
      }

      .header-nav {
        display: flex;
        align-items: center; /* Vertically centers all direct children */
        flex-wrap: nowrap;
        font-size: 1.5rem;
        margin-left: -0.5rem;
      }

      .header-nav a {
      text-decoration: none;
      margin: 0 0.5rem;
      color: #456650;
      font-weight: 500;
      }

      .header-nav span {
      color: #999;
      }
  </style>
  <script>
  function myFunction(){
        window.location.assign(`${import.meta.env.PUBLIC_API_URL}/post-editor` );
        
    }
  import { supabase } from "../lib/client-supabase";

    const logoutButton = document.querySelector('.logout-button');
  if (logoutButton) {
    logoutButton.addEventListener('click', async () => {
      console.log("Running");
      await supabase.auth.signOut();
      // your sign out logic
    


      // Optionally call backend API to sign out server-side (e.g., clear cookies)
      try {
        const res = await fetch('/api/auth/signout', {
    method: 'POST',
    credentials: 'include',    // ‚Üê send cookies so server can clear them
});
        if (!res.ok) {
          console.error('Backend sign out failed');
        } else {
          console.log('Backend sign out successful');
        }
      } catch (err) {
        console.error('Error calling backend sign out:', err);
      }

      // Redirect user after sign out
      window.location.assign(`${import.meta.env.PUBLIC_API_URL}`);
      }
    )}
    
      async function load_user_name() {
        try {
          const response = await fetch('/api/auth/user-data', {
            method: "GET",
            credentials: "include"
          });
    
          if (!response.ok) {
            throw new Error("Failed to fetch user");
          }
    
          const data = await response.json();
          const user = data.user;
    
          
    
          // Display username
          const usernameElem = document.getElementById("username");
          if (usernameElem) {
            usernameElem.textContent = user.user_metadata.username;
          }
          const userStatsElem = document.getElementById("user-stats");
          if (userStatsElem) {
            userStatsElem.textContent = "Joined: " + user.created_at.slice(0,10);
          }
    
          // Display stats (replace with real values later if available)
          
    
        } catch (error) {
          console.error(error);
          alert("Error loading user data.");
        }
      }

      async function load_bio() {
        try {
          const response = await fetch('/api/auth/get_bio', {
            method: "GET",
            credentials: "include"
          });
          
    
          if (!response.ok) {
            const err = await response.json();
            throw new Error(err.error || "Failed to fetch user");
          }
          const data = await response.json();
          const user = data.user;
          console.log(response)
          const bioElem = document.getElementById("Bio");
          if (bioElem) {
            bioElem.textContent = data.profile.bio;
          }
          
    
          // Display stats (replace with real values later if available)
          
    
        } catch (error) {
          console.error(error);
          alert("Error loading user data.");
        }
      }
      const newPostButton = document.getElementById('new-post-button-and-text');
      if (newPostButton) {
        newPostButton.addEventListener('click', myFunction); // Now the linter sees this usage
      } else {
        console.error("Button with ID 'new-post' not found for event listener.");
      }

    
      load_user_name();
      load_bio();

    </script>
</WebsiteLayout>
</body>
</html>