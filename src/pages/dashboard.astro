---
import HeaderWhite from '../components/HeaderWhite.astro';
import Analytics from '@vercel/analytics/astro';
import SpeedInsights from '@vercel/speed-insights/astro';
let tasks: any[] = [];

const cookie = Astro.request.headers.get('cookie') || '';
try {
  const res = await fetch(`${import.meta.env.PUBLIC_API_URL}api/tasks` , {
  headers: { cookie }
});
  const data = await res.json();
  tasks = (data.tasks || []).sort(
    (a: any, b: any) => new Date(a.due_date).getTime() - new Date(b.due_date).getTime()
  )
} catch (e) {
  tasks = [];
}

// Helper to compute task priority
function computePriority(task: any): number {
  const dbDate = new Date(task.due_date);
  const now = new Date();
  const diffMs = dbDate.getTime() - now.getTime();
  const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
  
  const estTime = Number(task.est_time) || 1;
  const timeLeft = Number(task.time_left) || estTime;
  const completionRatio = Math.max(0, Math.min(1, (estTime - timeLeft) / estTime));
  
  // Base urgency: higher for tasks due sooner (negative for overdue)
  const timeUrgency = diffDays <= 0 ? 20 + Math.abs(diffDays) * 2 : 10 / Math.max(1, diffDays);
  
  // Time investment factor: prioritize tasks that take more time
  const timeInvestment = Math.min(estTime / 2, 5); // Cap at 5 to avoid overwhelming other factors
  
  // Completion bonus: slightly prioritize tasks that are more completed
  const completionBonus = completionRatio * 3;
  
  // Overdue penalty: heavily penalize overdue tasks
  const overduePenalty = diffDays < 0 ? Math.abs(diffDays) * 5 : 0;
  
  // Final priority calculation
  const priority = timeUrgency + timeInvestment + completionBonus - overduePenalty;
  
  return Math.max(0, priority); // Ensure non-negative priority
}

let task_priority: Record<string, number> = {};
for (const task of tasks) {
  task_priority[task.id] = computePriority(task);
}

const sortedEntries = Object.entries(task_priority)
  .sort(([, a], [, b]) => b - a); // Sort by value, descending

// Filter out tasks with status "Done"
const incompleteTasks = tasks.filter(task => task.status !== "Done");

// Sort those by their priority (descending)
const sortedIncompleteTasks = incompleteTasks.sort((a, b) => {
  const priorityA = task_priority[a.id] || 0;
  const priorityB = task_priority[b.id] || 0;
  return priorityB - priorityA; // descending order
});

// Get the top 2 tasks (excluding Done tasks)
const topTwoTasks = sortedIncompleteTasks.slice(0, 2);
console.log("top tasks");
console.log(topTwoTasks);

// Get the 3rd and 4th priority tasks for "Next 7 Days" (excluding Done tasks)
const nextTwoTasks = sortedIncompleteTasks.slice(2, 4);



// Helper function to get days from now
function getDaysFromNow(dueDate: string): string {
  // Parse the due date directly to avoid timezone issues
  const [year, month, day] = dueDate.split('-').map(Number);
  const dueStart = new Date(year, month - 1, day); // month is 0-indexed
  
  const now = new Date();
  const nowStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  
  const diffTime = dueStart.getTime() - nowStart.getTime();
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
  
  console.log('getDaysFromNow - dueDate:', dueDate, 'dueStart:', dueStart, 'nowStart:', nowStart, 'diffDays:', diffDays);
  
  if (diffDays < 0) {
    return `${Math.abs(diffDays)} days overdue`;
  } else if (diffDays === 0) {
    return "Due today";
  } else if (diffDays === 1) {
    return "Due tomorrow";
  } else {
    return `Due in ${diffDays} days`;
  }
}

---
<HeaderWhite />
<main class="lw-main">
  <div class="epistemic-status"><p><em>Epistemic status: This dashboard summarizes your current tasks and links to all core tools. Minimal, neutral, and information-dense.</em></p></div>
  <h1 class="lw-title">Dashboard</h1>
  <section class="lw-section">
    <h2 class="lw-h2">Today's Tasks</h2>
    <ul class="lw-list">
      {topTwoTasks.length === 0 ? (
        <li style="color:#888;font-style:italic;">No tasks for today.</li>
      ) : (
        topTwoTasks.map(task => {
          const dueDate = new Date(task.due_date);
          const daysFromNow = getDaysFromNow(task.due_date);
          console.log(task.due_date);
          console.log(dueDate);
          const isOverdue = dueDate < new Date();
          let percentCompleted = null;
          if (task.est_time && task.time_left !== null && task.time_left !== undefined && Number(task.est_time) > 0) {
            percentCompleted = Math.max(0, Math.min(1, 1 - (Number(task.time_left) / Number(task.est_time))));
          }
          
          // Format date consistently with priority calculation
          // Parse the date string directly to avoid timezone issues
          const [year, month, day] = task.due_date.split('-').map(Number);
          const dueStart = new Date(year, month - 1, day); // month is 0-indexed
          console.log('Original date string:', task.due_date);
          console.log('Parsed components:', { year, month, day });
          console.log('dueStart:', dueStart);
          const formattedDate = dueStart.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
          console.log('formattedDate:', formattedDate);
          return (
            <li class="lw-task-item">
              <div class="lw-task-content">
                <span class="lw-task-title">
                  <a href={`/tasks/${task.id}`} class="lw-task-link">{task.item}</a>
                </span>
                <span class="lw-task-class">{task.class}</span>
              </div>
              <div class="lw-task-meta">
                <span class="lw-task-date">{formattedDate}</span>
                <span class={`lw-task-status ${isOverdue ? 'overdue' : ''}`}>
                  {daysFromNow}
                </span>
                <span class="lw-task-priority">
                  Priority: {Math.round(task_priority[task.id] || 0)}
                </span>
                <span class="lw-task-percent{percentCompleted === 0 ? ' lw-task-percent-zero' : ''}">
                  {percentCompleted !== null ? `${Math.round(percentCompleted * 100)}% completed` : 'N/A'}
                </span>
              </div>
            </li>
          );
        })
      )}
    </ul>
    <h2 class="lw-h2">Next 7 Days</h2>
    <ul class="lw-list">
      {nextTwoTasks.length === 0 ? (
        <li style="color:#888;font-style:italic;">No tasks for the next 7 days.</li>
      ) : (
        nextTwoTasks.map(task => {
          const dueDate = new Date(task.due_date);
          const daysFromNow = getDaysFromNow(task.due_date);
          const isOverdue = dueDate < new Date();
          
          // Format date consistently with priority calculation
          // Parse the date string directly to avoid timezone issues
          const [year, month, day] = task.due_date.split('-').map(Number);
          const dueStart = new Date(year, month - 1, day); // month is 0-indexed
          const formattedDate = dueStart.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });
          
          return (
            <li class="lw-task-item">
              <div class="lw-task-content">
                <span class="lw-task-title">
                  <a href={`/tasks/${task.id}`} class="lw-task-link">{task.item}</a>
                </span>
                <span class="lw-task-class">{task.class}</span>
              </div>
              <div class="lw-task-meta">
                <span class="lw-task-date">{formattedDate}</span>
                <span class={`lw-task-status ${isOverdue ? 'overdue' : ''}`}>
                  {daysFromNow}
                </span>
                <span class="lw-task-priority">
                  Priority: {Math.round(task_priority[task.id] || 0)}
                </span>
              </div>
            </li>
          );
        })
      )}
    </ul>
    <button class="lw-btn lw-btn-add">Quick Add Task/Note</button>
    <a href="/notes" class="lw-link">Go to Daily Notes</a>
    <div class="lw-quicklinks">
      <span class="lw-h3">Quick Links:</span>
      <a href="#" class="lw-link">Google Classroom</a>
      <a href="#" class="lw-link">OneNote</a>
      <a href="#" class="lw-link">Albert</a>
      <a href="#" class="lw-link">Drive</a>
    </div>
  </section>
  <hr class="lw-hr" />
  <section class="lw-section">
    <h2 class="lw-h2">Master Tracker (Preview)</h2>
    <div class="lw-table-scroll">
      <table class="lw-table">
        <thead>
          <tr>
            <th>Class</th><th>Item</th><th>Type</th><th>Due</th><th>Status</th>
          </tr>
        </thead>
        <tbody>
          {tasks.length === 0 && (
            <tr><td colspan="5" style="text-align:center;color:#888;font-style:italic;">No tasks found.</td></tr>
          )}
          {tasks.map((task: any) => (
            <tr>
              <td>{task.class}</td>
              <td><a href={`/tasks/${task.id}`} class="lw-task-link">{task.item}</a></td>
              <td>{task.type}</td>
              <td>{task.due_date}</td>
              <td>{task.status}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </section>
  <hr class="lw-hr" />
  <section class="lw-section lw-nav-row">
    <a href="/master-tracker" class="lw-btn">Master Tracker</a>
    <a href="/calendar" class="lw-btn">Calendar</a>
    <a href="/error-log" class="lw-btn">Error Log</a>
    <a href="/digital-archive" class="lw-btn">Digital Archive</a>
  </section>
</main>
<style>
body {
  background: #f9f9f9;
  color: #1a1a1a;
}
.lw-layout {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  background: #fff;
  min-height: 100vh;
}
.lw-main {
  max-width: 800px;
  margin: 0 auto;
  padding: 0 1rem 1.5rem 1rem;
  font-family: Georgia, serif;
  background: #fff;
  flex: 1 1 0%;
}
.epistemic-status {
  background: #f3f3f3;
  border: 1px solid #eee;
  font-size: 0.98rem;
  font-style: italic;
  color: #444;
  margin: 0 0 1rem 0;
  padding: 0.5rem 0.8rem;
  border-radius: 0;
}
.lw-title {
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-size: 1.2rem;
  font-weight: 700;
  margin: 0 0 1rem 0;
  text-align: left;
}
.lw-section {
  margin: 0 0 0.7rem 0;
  padding: 0;
  border: none;
}
.lw-h2 {
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-size: 1.02rem;
  font-weight: 600;
  color: #232323;
  margin: 0 0 0.3rem 0;
  border: none;
  text-align: left;
}
.lw-h3 {
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-size: 0.95rem;
  font-weight: 600;
  color: #232323;
  margin: 0 0.3rem 0 0;
}
.lw-list {
  list-style: none;
  padding: 0;
  margin: 0 0 0.5rem 0;
}
.lw-task-item {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  padding: 0.3rem 0;
  border-bottom: 1px solid #f0f0f0;
}
.lw-task-item:last-child {
  border-bottom: none;
}
.lw-task-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.1rem;
}
.lw-task-title {
  font-weight: 600;
  color: #1a1a1a;
  font-size: 0.98rem;
}
.lw-task-class {
  font-size: 0.9rem;
  color: #666;
  font-style: italic;
}
.lw-task-meta {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 0.1rem;
  min-width: 120px;
}
.lw-task-date {
  color: #374151;
  font-size: 0.9rem;
  font-weight: 500;
}
.lw-task-status {
  color: #92400e;
  font-weight: 500;
  border: 1px solid #ddd;
  background: #f5f5f5;
  border-radius: 0;
  padding: 0.05rem 0.3rem;
  font-size: 0.85em;
  text-align: center;
}
.lw-task-status.overdue {
  color: #b91c1c;
  background: #fef2f2;
  border-color: #fecaca;
}
.lw-btn {
  display: inline-block;
  border: 1px solid #aaa;
  background: #eee;
  color: #111;
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-size: 1rem;
  padding: 0.18rem 0.8rem;
  border-radius: 0;
  text-decoration: none;
  margin: 0 0.3rem 0.3rem 0;
  transition: background 0.15s, border-color 0.15s;
  min-width: 0;
}
.lw-btn:hover {
  background: #e2e2e2;
  border-color: #888;
}
.lw-btn:active {
  background: #e2e2e2;
  border-color: #888;
}
.lw-btn:focus {
  outline: 2px solid #2b6cb0;
}
.lw-btn-add {
  border-color: #232323;
  font-weight: 600;
}
.lw-link {
  color: #2b6cb0;
  text-decoration: underline;
  border: 1px solid #bdbdbd;
  border-radius: 0;
  background: none;
  padding: 0.1rem 0.5rem;
  margin-right: 0.5rem;
  font-size: 1.01rem;
  font-family: 'Inter', 'Segoe UI', sans-serif;
  transition: border-color 0.15s, background 0.15s;
}
.lw-link:hover {
  border-color: #232323;
  background: #f5f5f5;
}
.lw-quicklinks {
  margin-top: 0.5rem;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.3rem;
}
.lw-table-scroll {
  overflow-x: auto;
  margin-bottom: 0.5rem;
}
.lw-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.97rem;
  background: none;
  border: none;
}
.lw-table th, .lw-table td {
  border: 1px solid #ddd;
  padding: 0.18rem 0.3rem;
  text-align: left;
  font-family: Georgia, serif;
}
.lw-table th {
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-weight: 600;
  background: #f5f5f5;
}
.lw-hr {
  border: none;
  border-bottom: 1px solid #ddd;
  margin: 0.7rem 0 0.7rem 0;
}
.lw-nav-row {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  gap: 0.2rem;
  margin: 0;
  padding: 0;
  border: none;
}
.lw-nav-row .lw-btn {
  margin-bottom: 0;
}
@media (max-width: 900px) {
  .lw-layout {
    flex-direction: column;
  }
  .lw-main {
    max-width: 100vw;
    padding: 0.5rem 0.2rem 1rem 0.2rem;
  }
  .lw-task-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.2rem;
  }
  .lw-task-meta {
    align-items: flex-start;
    min-width: auto;
  }
}
.lw-task-link {
  color: inherit;
  text-decoration: none;
  cursor: pointer;
  border-radius: 0;
  outline: none;
  transition: background 0.15s, color 0.15s;
  padding: 0.02rem 0.2rem;
  margin: -0.02rem -0.2rem;
  display: inline-block;
}
.lw-task-link:hover, .lw-task-link:focus {
  background: #f5f5f5;
  color: #888;
}
.lw-task-percent {
  display: inline-block;
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-size: 0.98rem;
  color: #444;
  background: #f5f5f5;
  border: 1px solid #ddd;
  border-radius: 0;
  padding: 0.05rem 0.3rem;
  margin-top: 0.15rem;
  margin-left: 0.2rem;
  text-align: right;
  min-width: 80px;
}
.lw-task-percent-zero {
  font-size: 0.92rem;
  color: #888;
  min-width: 60px;
}
.lw-task-priority {
  display: inline-block;
  font-family: 'Inter', Helvetica, Arial, sans-serif;
  font-size: 0.95rem;
  color: #666;
  background: #f8f8f8;
  border: 1px solid #ddd;
  border-radius: 0;
  padding: 0.05rem 0.3rem;
  margin-top: 0.15rem;
  margin-left: 0.2rem;
  text-align: right;
  min-width: 90px;
}
</style>

<Analytics />
<SpeedInsights /> 