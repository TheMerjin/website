---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { readFileSync } from 'fs';
import { join } from 'path';

// Always read book files as UTF-8 to ensure correct character encoding
// Example: readFileSync(filePath, 'utf-8')

// Load the book catalog
const booksCatalog = JSON.parse(readFileSync(join(process.cwd(), 'src', 'data', 'books.json'), 'utf-8'));
const books: any[] = booksCatalog.books;

export async function getStaticPaths() {
  return books.map((book: any) => ({ params: { bookid: book.id } }));
}

const { bookid } = Astro.params;
const book = books.find((b: any) => b.id === bookid);
let bookContent = '';

try {
  // Try to read the actual HTML file
  const filePath = join(process.cwd(), 'public', 'standard-ebooks-output', book.filename);
  bookContent = readFileSync(filePath, 'utf-8'); // Always use 'utf-8' encoding
} catch (error) {
  // Fallback content if file not found
  bookContent = `
    <div class="book-content">
      <h1>${book?.title || 'Book Not Found'}</h1>
      <p>This book is not available in the current collection.</p>
      <p>Please check back later or contact the administrator.</p>
    </div>
  `;
}

// Extract a simple table of contents from <h2> and <h3> tags
let toc: { level: number, text: string }[] = [];
if (bookContent) {
  const h2s = [...bookContent.matchAll(/<h2[^>]*>(.*?)<\/h2>/gi)];
  const h3s = [...bookContent.matchAll(/<h3[^>]*>(.*?)<\/h3>/gi)];
  toc = [
    ...h2s.map(m => ({ level: 2, text: m[1] })),
    ...h3s.map(m => ({ level: 3, text: m[1] }))
  ];
}
---

<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.17.0/dist/katex.min.css">
</head>

<BaseLayout title={book?.title || 'Book Reader'}>
  <div class="rts-bg min-h-screen flex justify-center">
    <!-- Sidebar TOC -->
    <aside class="rts-sidebar hidden lg:block sticky top-0 h-screen overflow-y-auto px-6 py-10">
      <div class="mb-8">
        <a href="/books" class="rts-link text-xs">‚Üê All Books</a>
      </div>
      <div class="mb-6">
        <h2 class="text-lg font-bold mb-2">{book?.title}</h2>
        <div class="text-sm text-gray-600 mb-1">{book?.author}</div>
        <div class="text-xs text-gray-400">{book?.year}</div>
      </div>
      <nav>
        <div class="text-xs text-gray-500 mb-2">Contents</div>
        <ul class="space-y-2">
          {toc.length === 0 && <li class="text-gray-400 italic">No TOC</li>}
          {toc.map((item, i) => (
            <li class={item.level === 2 ? 'font-semibold' : 'pl-4 text-gray-600'}>
              <a href={`#toc-${i}`} class="rts-link">{item.text}</a>
            </li>
          ))}
        </ul>
      </nav>
    </aside>

    <!-- Main Content -->
    <main class="rts-main prose prose-lg max-w-2xl w-full px-4 py-12 bg-white rounded-lg my-12">
      <header class="mb-10">
        <h1 class="text-4xl font-bold mb-2 font-serif">{book?.title}</h1>
        <div class="text-lg text-gray-700 mb-1">{book?.author}</div>
        <div class="text-sm text-gray-400 mb-2">{book?.year}</div>
        <div class="text-base text-gray-500 italic mb-2">{book?.description}</div>
      </header>
      <article id="book-content" class="rts-reader-content">
        <div set:html={bookContent}></div>
      </article>
    </main>
  </div>
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.17.0/dist/katex.min.js"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.17.0/dist/contrib/auto-render.min.js"
    onload="renderMathInElement(document.getElementById('book-content'), {delimiters: [
      {left: '$$', right: '$$', display: true},
      {left: '$', right: '$', display: false},
      {left: '\\(', right: '\\)', display: false},
      {left: '\\[', right: '\\]', display: true}
    ]});"></script>
</BaseLayout>

<style>
  .rts-bg {
    background: #f8f9fa;
    min-height: 100vh;
  }
  .rts-main {
    font-family: 'Merriweather', 'Georgia', serif;
    background: #fff;
    border-radius: 0.75rem;
    margin-top: 2rem;
    margin-bottom: 2rem;
    box-shadow: none;
    border: none;
  }
  .rts-sidebar {
    width: 280px;
    min-width: 180px;
    max-width: 320px;
    background: transparent;
    font-family: 'Inter', 'Segoe UI', sans-serif;
    color: #444;
  }
  .rts-link {
    color: #3b5b8c;
    text-decoration: underline;
    transition: color 0.15s;
  }
  .rts-link:hover {
    color: #1a2a40;
  }
  .rts-reader-content {
    font-family: 'Merriweather', 'Georgia', serif;
    font-size: 19px;
    line-height: 1.7;
    color: #232323;
    background: none;
    box-shadow: none;
    border: none;
  }
  .rts-reader-content h1, .rts-reader-content h2, .rts-reader-content h3 {
    font-family: 'Merriweather', 'Georgia', serif;
    font-weight: 700;
    margin-top: 2.5rem;
    margin-bottom: 1.2rem;
    color: #2d3748;
  }
  .rts-reader-content h2 {
    font-size: 2rem;
    border-bottom: 1px solid #f0f0f0;
    padding-bottom: 0.25em;
  }
  .rts-reader-content h3 {
    font-size: 1.3rem;
    color: #3b5b8c;
  }
  .rts-reader-content p {
    margin-bottom: 1.5em;
    text-align: left;
  }
  .rts-reader-content blockquote {
    border-left: 4px solid #3B82F6;
    padding-left: 1.5rem;
    margin: 2rem 0;
    font-style: italic;
    color: #6B7280;
    background: #f7f7fa;
    border-radius: 0.5rem;
  }
  .rts-reader-content table {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
  }
  .rts-reader-content table td {
    padding: 0.75rem;
    border-bottom: 1px solid #E5E7EB;
  }
  .rts-reader-content table td:first-child {
    font-weight: 600;
    color: #374151;
  }
  .rts-reader-content i, .rts-reader-content em {
    font-style: italic;
  }
  .rts-reader-content b, .rts-reader-content strong {
    font-weight: 600;
  }
  .rts-reader-content abbr {
    text-decoration: underline dotted;
  }
  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .rts-sidebar { display: none; }
    .rts-main { max-width: 100vw; border-radius: 0; }
  }
</style> 